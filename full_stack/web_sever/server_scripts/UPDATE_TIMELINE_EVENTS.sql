USE[ID_Projects]
IF OBJECT_ID('UPDATE_TIMELINE_EVENTS') IS NOT NULL
    DROP PROC UPDATE_TIMELINE_EVENTS
GO
CREATE PROC UPDATE_TIMELINE_EVENTS  @_ID_PROJ_NUM INT, @_EVENT_NAME VARCHAR(128), @_STAT_NAME_2_CHANGE_EVENT_2 VARCHAR(128) = NULL ,@_MAKE_EVENT_IF_NOT_IN_DB BIT, @_EVENT_DUE_DATE DATETIME = NULL
AS
DECLARE @_RNT_VAL INT = 1
BEGIN TRY

IF NOT (SELECT EVENT_STATUS FROM GET_PROJECT_EVENTS(@_ID_PROJ_NUM) WHERE (LTRIM(RTRIM(UPPER(EVENT_TYPE))) = LTRIM(RTRIM(UPPER(@_EVENT_NAME))))) IS NULL BEGIN

IF @_EVENT_DUE_DATE IS NULL OR @_EVENT_DUE_DATE =''
	SET @_EVENT_DUE_DATE = (SELECT EVENT_DATE  FROM GET_PROJECT_EVENTS(@_ID_PROJ_NUM) WHERE LTRIM(RTRIM(UPPER(EVENT_TYPE))) = LTRIM(RTRIM(UPPER(@_EVENT_NAME))) AND NOT EVENT_STATUS ='COMPLETED');

IF @_STAT_NAME_2_CHANGE_EVENT_2 IS NULL OR @_STAT_NAME_2_CHANGE_EVENT_2=''
	SET @_STAT_NAME_2_CHANGE_EVENT_2 = (SELECT EVENT_STATUS FROM GET_PROJECT_EVENTS(@_ID_PROJ_NUM) WHERE EVENT_TYPE = @_EVENT_NAME);

--IF NOT (SELECT CONVERT(VARCHAR(15),EVENT_DATE,101) FROM GET_PROJECT_EVENTS(@_ID_PROJ_NUM) WHERE (LTRIM(RTRIM(UPPER(EVENT_TYPE))) = LTRIM(RTRIM(UPPER(@_EVENT_NAME))))) = @_EVENT_DUE_DATE
--	UPDATE PROJECT_EVENTS SET EVENT_DATE = @_EVENT_DUE_DATE WHERE PE_PROJ_DB_IDX_NUM = (SELECT PN_PROJ_DB_IDX_NUM FROM PROJECT_NUMS WHERE ID_PROJ_NUM = @_ID_PROJ_NUM) AND
--																								EVENT_TYPE_ID = (SELECT ET_DB_IDX_NUM FROM EVENT_TYPE WHERE EVENT_TYPE_NAME = @_EVENT_NAME)

IF NOT (SELECT EVENT_DATE  FROM GET_PROJECT_EVENTS(@_ID_PROJ_NUM) WHERE LTRIM(RTRIM(UPPER(EVENT_TYPE))) = LTRIM(RTRIM(UPPER(@_EVENT_NAME))) AND NOT EVENT_STATUS ='COMPLETED') = @_EVENT_DUE_DATE BEGIN
	DECLARE @_PROJ_EVENT_ID INT = (SELECT PE_DB_IDX_NUM FROM PROJECT_EVENTS WHERE 
									PE_PROJ_DB_IDX_NUM = (SELECT PN_PROJ_DB_IDX_NUM FROM PROJECT_NUMS WHERE ID_PROJ_NUM = @_ID_PROJ_NUM) 
									AND EVENT_TYPE_ID = (SELECT TOP(1) ET_DB_IDX_NUM FROM EVENT_TYPE WHERE UPPER(EVENT_TYPE_NAME) = UPPER(@_EVENT_NAME))
									AND NOT EVENT_STATUS_IDX = 0 )
	UPDATE PROJECT_EVENTS SET EVENT_DATE = @_EVENT_DUE_DATE WHERE PE_DB_IDX_NUM = @_PROJ_EVENT_ID
END	

EXEC LOG_PROJECT_EVENT @_ID_PROJ_NUM,@_EVENT_NAME,@_STAT_NAME_2_CHANGE_EVENT_2,@_MAKE_EVENT_IF_NOT_IN_DB,@_EVENT_DUE_DATE


IF(UPPER(@_STAT_NAME_2_CHANGE_EVENT_2) ='COMPLETED')BEGIN
	DECLARE @_EVNT_NME_2_UPDT VARCHAR(128) = (select TOP(1) EVENT_TYPE from  GET_PROJECT_EVENTS(@_ID_PROJ_NUM) WHERE NOT EVENT_STATUS ='COMPLETED' ORDER BY ID)
	EXEC LOG_PROJECT_EVENT @_ID_PROJ_NUM,@_EVNT_NME_2_UPDT,'ACTIVE',@_MAKE_EVENT_IF_NOT_IN_DB,NULL
END
--END ELSE IF(UPPER(@_STAT_NAME_2_CHANGE_EVENT_2) ='ACTIVE')BEGIN

--END ELSE IF(UPPER(@_STAT_NAME_2_CHANGE_EVENT_2) ='ON HOLD')BEGIN

--END ELSE IF(UPPER(@_STAT_NAME_2_CHANGE_EVENT_2) ='PENDING')BEGIN

--END ELSE IF(UPPER(@_STAT_NAME_2_CHANGE_EVENT_2) ='LATE')BEGIN

--END ELSE IF(UPPER(@_STAT_NAME_2_CHANGE_EVENT_2) ='IN PROGRESS')BEGIN

--END
END
END TRY  
BEGIN CATCH  
SET @_RNT_VAL = 0
SELECT @_RNT_VAL
 DECLARE @ErrorMessage NVARCHAR(4000);  
    DECLARE @ErrorSeverity INT;  
    DECLARE @ErrorState INT;  
  
    SELECT   
        @ErrorMessage = ERROR_MESSAGE(),  
        @ErrorSeverity = ERROR_SEVERITY(),  
        @ErrorState = ERROR_STATE();  
  
    -- Use RAISERROR inside the CATCH block to return error  
    -- information about the original error that caused  
    -- execution to jump to the CATCH block.  
    RAISERROR (@ErrorMessage, -- Message text.  
               @ErrorSeverity, -- Severity.  
               @ErrorState -- State.  
               );  
END CATCH 


----EXEC UPDATE_TIMELINE_EVENTS 